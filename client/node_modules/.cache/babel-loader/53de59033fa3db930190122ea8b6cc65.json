{"ast":null,"code":"/**\n * MUI CSS/JS utilities module\n * @module lib/util\n */\n'use strict';\n\nvar config = require('../config'),\n    jqLite = require('./jqLite'),\n    scrollLock = 0,\n    scrollLockCls = 'mui-scroll-lock',\n    scrollLockPos,\n    scrollStyleEl,\n    scrollEventHandler,\n    _scrollBarWidth,\n    _supportsPointerEvents;\n\nscrollEventHandler = function scrollEventHandler(ev) {\n  // stop propagation on window scroll events\n  if (!ev.target.tagName) ev.stopImmediatePropagation();\n};\n/**\n * Logging function\n */\n\n\nfunction logFn() {\n  var win = window;\n\n  if (config.debug && typeof win.console !== \"undefined\") {\n    try {\n      win.console.log.apply(win.console, arguments);\n    } catch (a) {\n      var e = Array.prototype.slice.call(arguments);\n      win.console.log(e.join(\"\\n\"));\n    }\n  }\n}\n/**\n * Load CSS text in new stylesheet\n * @param {string} cssText - The css text.\n */\n\n\nfunction loadStyleFn(cssText) {\n  var doc = document,\n      head; // copied from jQuery \n\n  head = doc.head || doc.getElementsByTagName('head')[0] || doc.documentElement;\n  var e = doc.createElement('style');\n  e.type = 'text/css';\n  if (e.styleSheet) e.styleSheet.cssText = cssText;else e.appendChild(doc.createTextNode(cssText)); // add to document\n\n  head.insertBefore(e, head.firstChild);\n  return e;\n}\n/**\n * Raise an error\n * @param {string} msg - The error message.\n */\n\n\nfunction raiseErrorFn(msg, useConsole) {\n  if (useConsole) {\n    if (typeof console !== 'undefined') console.warn('MUI Warning: ' + msg);\n  } else {\n    throw new Error('MUI: ' + msg);\n  }\n}\n/**\n * Convert Classname object, with class as key and true/false as value, to an\n * class string.\n * @param  {Object} classes The classes\n * @return {String}         class string\n */\n\n\nfunction classNamesFn(classes) {\n  var cs = '';\n\n  for (var i in classes) {\n    cs += classes[i] ? i + ' ' : '';\n  }\n\n  return cs.trim();\n}\n/**\n * Check if client supports pointer events.\n */\n\n\nfunction supportsPointerEventsFn() {\n  // check cache\n  if (_supportsPointerEvents !== undefined) return _supportsPointerEvents;\n  var element = document.createElement('x');\n  element.style.cssText = 'pointer-events:auto';\n  _supportsPointerEvents = element.style.pointerEvents === 'auto';\n  return _supportsPointerEvents;\n}\n/**\n * Create callback closure.\n * @param {Object} instance - The object instance.\n * @param {String} funcName - The name of the callback function.\n */\n\n\nfunction callbackFn(instance, funcName) {\n  return function () {\n    instance[funcName].apply(instance, arguments);\n  };\n}\n/**\n * Dispatch event.\n * @param {Element} element - The DOM element.\n * @param {String} eventType - The event type.\n * @param {Boolean} bubbles=true - If true, event bubbles.\n * @param {Boolean} cancelable=true = If true, event is cancelable\n * @param {Object} [data] - Data to add to event object\n */\n\n\nfunction dispatchEventFn(element, eventType, bubbles, cancelable, data) {\n  var ev = document.createEvent('HTMLEvents'),\n      bubbles = bubbles !== undefined ? bubbles : true,\n      cancelable = cancelable !== undefined ? cancelable : true,\n      k;\n  ev.initEvent(eventType, bubbles, cancelable); // add data to event object\n\n  if (data) for (k in data) {\n    ev[k] = data[k];\n  } // dispatch\n\n  if (element) element.dispatchEvent(ev);\n  return ev;\n}\n/**\n * Turn on window scroll lock.\n */\n\n\nfunction enableScrollLockFn() {\n  // increment counter\n  scrollLock += 1; // add lock\n\n  if (scrollLock === 1) {\n    var doc = document,\n        win = window,\n        htmlEl = doc.documentElement,\n        bodyEl = doc.body,\n        scrollBarWidth = getScrollBarWidth(),\n        cssProps,\n        cssStr,\n        x; // define scroll lock class dynamically\n\n    cssProps = ['overflow:hidden'];\n\n    if (scrollBarWidth) {\n      // scrollbar-y\n      if (htmlEl.scrollHeight > htmlEl.clientHeight) {\n        x = parseInt(jqLite.css(bodyEl, 'padding-right')) + scrollBarWidth;\n        cssProps.push('padding-right:' + x + 'px');\n      } // scrollbar-x\n\n\n      if (htmlEl.scrollWidth > htmlEl.clientWidth) {\n        x = parseInt(jqLite.css(bodyEl, 'padding-bottom')) + scrollBarWidth;\n        cssProps.push('padding-bottom:' + x + 'px');\n      }\n    } // define css class dynamically\n\n\n    cssStr = '.' + scrollLockCls + '{';\n    cssStr += cssProps.join(' !important;') + ' !important;}';\n    scrollStyleEl = loadStyleFn(cssStr); // cancel 'scroll' event listener callbacks\n\n    jqLite.on(win, 'scroll', scrollEventHandler, true); // add scroll lock\n\n    scrollLockPos = {\n      left: jqLite.scrollLeft(win),\n      top: jqLite.scrollTop(win)\n    };\n    jqLite.addClass(bodyEl, scrollLockCls);\n  }\n}\n/**\n * Turn off window scroll lock.\n * @param {Boolean} resetPos - Reset scroll position to original value.\n */\n\n\nfunction disableScrollLockFn(resetPos) {\n  // ignore\n  if (scrollLock === 0) return; // decrement counter\n\n  scrollLock -= 1; // remove lock \n\n  if (scrollLock === 0) {\n    // remove scroll lock and delete style element\n    jqLite.removeClass(document.body, scrollLockCls); // restore scroll position\n\n    if (resetPos) window.scrollTo(scrollLockPos.left, scrollLockPos.top); // restore scroll event listeners\n\n    jqLite.off(window, 'scroll', scrollEventHandler, true); // delete style element (deferred for Firefox Quantum bugfix)\n\n    setTimeout(function () {\n      scrollStyleEl.parentNode.removeChild(scrollStyleEl);\n    }, 0);\n  }\n}\n/**\n * Return scroll bar width.\n */\n\n\nvar getScrollBarWidth = function getScrollBarWidth() {\n  // check cache\n  if (_scrollBarWidth !== undefined) return _scrollBarWidth; // calculate scroll bar width\n\n  var doc = document,\n      bodyEl = doc.body,\n      el = doc.createElement('div');\n  el.innerHTML = '<div style=\"width:50px;height:50px;position:absolute;' + 'left:-50px;top:-50px;overflow:auto;\"><div style=\"width:1px;' + 'height:100px;\"></div></div>';\n  el = el.firstChild;\n  bodyEl.appendChild(el);\n  _scrollBarWidth = el.offsetWidth - el.clientWidth;\n  bodyEl.removeChild(el);\n  return _scrollBarWidth;\n};\n/**\n * requestAnimationFrame polyfilled\n * @param {Function} callback - The callback function\n */\n\n\nfunction requestAnimationFrameFn(callback) {\n  var fn = window.requestAnimationFrame;\n  if (fn) fn(callback);else setTimeout(callback, 0);\n}\n/**\n * Define the module API\n */\n\n\nmodule.exports = {\n  /** Create callback closures */\n  callback: callbackFn,\n\n  /** Classnames object to string */\n  classNames: classNamesFn,\n\n  /** Disable scroll lock */\n  disableScrollLock: disableScrollLockFn,\n\n  /** Dispatch event */\n  dispatchEvent: dispatchEventFn,\n\n  /** Enable scroll lock */\n  enableScrollLock: enableScrollLockFn,\n\n  /** Log messages to the console when debug is turned on */\n  log: logFn,\n\n  /** Load CSS text as new stylesheet */\n  loadStyle: loadStyleFn,\n\n  /** Raise MUI error */\n  raiseError: raiseErrorFn,\n\n  /** Request animation frame */\n  requestAnimationFrame: requestAnimationFrameFn,\n\n  /** Support Pointer Events check */\n  supportsPointerEvents: supportsPointerEventsFn\n};","map":null,"metadata":{},"sourceType":"script"}