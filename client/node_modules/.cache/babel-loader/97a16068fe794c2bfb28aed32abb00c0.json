{"ast":null,"code":"/**\n * MUI CSS/JS jqLite module\n * @module lib/jqLite\n */\n'use strict';\n/**\n * Add a class to an element.\n * @param {Element} element - The DOM element.\n * @param {string} cssClasses - Space separated list of class names.\n */\n\nfunction jqLiteAddClass(element, cssClasses) {\n  if (!cssClasses || !element.setAttribute) return;\n\n  var existingClasses = _getExistingClasses(element),\n      splitClasses = cssClasses.split(' '),\n      cssClass;\n\n  for (var i = 0; i < splitClasses.length; i++) {\n    cssClass = splitClasses[i].trim();\n\n    if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {\n      existingClasses += cssClass + ' ';\n    }\n  }\n\n  element.setAttribute('class', existingClasses.trim());\n}\n/**\n * Get or set CSS properties.\n * @param {Element} element - The DOM element.\n * @param {string} [name] - The property name.\n * @param {string} [value] - The property value.\n */\n\n\nfunction jqLiteCss(element, name, value) {\n  // Return full style object\n  if (name === undefined) {\n    return getComputedStyle(element);\n  }\n\n  var nameType = jqLiteType(name); // Set multiple values\n\n  if (nameType === 'object') {\n    for (var key in name) {\n      element.style[_camelCase(key)] = name[key];\n    }\n\n    return;\n  } // Set a single value\n\n\n  if (nameType === 'string' && value !== undefined) {\n    element.style[_camelCase(name)] = value;\n  }\n\n  var styleObj = getComputedStyle(element),\n      isArray = jqLiteType(name) === 'array'; // Read single value\n\n  if (!isArray) return _getCurrCssProp(element, name, styleObj); // Read multiple values\n\n  var outObj = {},\n      key;\n\n  for (var i = 0; i < name.length; i++) {\n    key = name[i];\n    outObj[key] = _getCurrCssProp(element, key, styleObj);\n  }\n\n  return outObj;\n}\n/**\n * Check if element has class.\n * @param {Element} element - The DOM element.\n * @param {string} cls - The class name string.\n */\n\n\nfunction jqLiteHasClass(element, cls) {\n  if (!cls || !element.getAttribute) return false;\n  return _getExistingClasses(element).indexOf(' ' + cls + ' ') > -1;\n}\n/**\n * Return the type of a variable.\n * @param {} somevar - The JavaScript variable.\n */\n\n\nfunction jqLiteType(somevar) {\n  // handle undefined\n  if (somevar === undefined) return 'undefined'; // handle others (of type [object <Type>])\n\n  var typeStr = Object.prototype.toString.call(somevar);\n\n  if (typeStr.indexOf('[object ') === 0) {\n    return typeStr.slice(8, -1).toLowerCase();\n  } else {\n    throw new Error(\"MUI: Could not understand type: \" + typeStr);\n  }\n}\n/**\n * Attach an event handler to a DOM element\n * @param {Element} element - The DOM element.\n * @param {string} events - Space separated event names.\n * @param {Function} callback - The callback function.\n * @param {Boolean} useCapture - Use capture flag.\n */\n\n\nfunction jqLiteOn(element, events, callback, useCapture) {\n  useCapture = useCapture === undefined ? false : useCapture;\n  var cache = element._muiEventCache = element._muiEventCache || {};\n  events.split(' ').map(function (event) {\n    // add to DOM\n    element.addEventListener(event, callback, useCapture); // add to cache\n\n    cache[event] = cache[event] || [];\n    cache[event].push([callback, useCapture]);\n  });\n}\n/**\n * Remove an event handler from a DOM element\n * @param {Element} element - The DOM element.\n * @param {string} events - Space separated event names.\n * @param {Function} callback - The callback function.\n * @param {Boolean} useCapture - Use capture flag.\n */\n\n\nfunction jqLiteOff(element, events, callback, useCapture) {\n  useCapture = useCapture === undefined ? false : useCapture; // remove from cache\n\n  var cache = element._muiEventCache = element._muiEventCache || {},\n      argsList,\n      args,\n      i;\n  events.split(' ').map(function (event) {\n    argsList = cache[event] || [];\n    i = argsList.length;\n\n    while (i--) {\n      args = argsList[i]; // remove all events if callback is undefined\n\n      if (callback === undefined || args[0] === callback && args[1] === useCapture) {\n        // remove from cache\n        argsList.splice(i, 1); // remove from DOM\n\n        element.removeEventListener(event, args[0], args[1]);\n      }\n    }\n  });\n}\n/**\n * Attach an event hander which will only execute once per element per event\n * @param {Element} element - The DOM element.\n * @param {string} events - Space separated event names.\n * @param {Function} callback - The callback function.\n * @param {Boolean} useCapture - Use capture flag.\n */\n\n\nfunction jqLiteOne(element, events, callback, useCapture) {\n  events.split(' ').map(function (event) {\n    jqLiteOn(element, event, function onFn(ev) {\n      // execute callback\n      if (callback) callback.apply(this, arguments); // remove wrapper\n\n      jqLiteOff(element, event, onFn, useCapture);\n    }, useCapture);\n  });\n}\n/**\n * Get or set horizontal scroll position\n * @param {Element} element - The DOM element\n * @param {number} [value] - The scroll position\n */\n\n\nfunction jqLiteScrollLeft(element, value) {\n  var win = window; // get\n\n  if (value === undefined) {\n    if (element === win) {\n      var docEl = document.documentElement;\n      return (win.pageXOffset || docEl.scrollLeft) - (docEl.clientLeft || 0);\n    } else {\n      return element.scrollLeft;\n    }\n  } // set\n\n\n  if (element === win) win.scrollTo(value, jqLiteScrollTop(win));else element.scrollLeft = value;\n}\n/**\n * Get or set vertical scroll position\n * @param {Element} element - The DOM element\n * @param {number} value - The scroll position\n */\n\n\nfunction jqLiteScrollTop(element, value) {\n  var win = window; // get\n\n  if (value === undefined) {\n    if (element === win) {\n      var docEl = document.documentElement;\n      return (win.pageYOffset || docEl.scrollTop) - (docEl.clientTop || 0);\n    } else {\n      return element.scrollTop;\n    }\n  } // set\n\n\n  if (element === win) win.scrollTo(jqLiteScrollLeft(win), value);else element.scrollTop = value;\n}\n/**\n * Return object representing top/left offset and element height/width.\n * @param {Element} element - The DOM element.\n */\n\n\nfunction jqLiteOffset(element) {\n  var win = window,\n      rect = element.getBoundingClientRect(),\n      scrollTop = jqLiteScrollTop(win),\n      scrollLeft = jqLiteScrollLeft(win);\n  return {\n    top: rect.top + scrollTop,\n    left: rect.left + scrollLeft,\n    height: rect.height,\n    width: rect.width\n  };\n}\n/**\n * Attach a callback to the DOM ready event listener\n * @param {Function} fn - The callback function.\n */\n\n\nfunction jqLiteReady(fn) {\n  var done = false,\n      top = true,\n      doc = document,\n      win = doc.defaultView,\n      root = doc.documentElement,\n      add = doc.addEventListener ? 'addEventListener' : 'attachEvent',\n      rem = doc.addEventListener ? 'removeEventListener' : 'detachEvent',\n      pre = doc.addEventListener ? '' : 'on';\n\n  var init = function init(e) {\n    if (e.type == 'readystatechange' && doc.readyState != 'complete') {\n      return;\n    }\n\n    (e.type == 'load' ? win : doc)[rem](pre + e.type, init, false);\n    if (!done && (done = true)) fn.call(win, e.type || e);\n  };\n\n  var poll = function poll() {\n    try {\n      root.doScroll('left');\n    } catch (e) {\n      setTimeout(poll, 50);\n      return;\n    }\n\n    init('poll');\n  };\n\n  if (doc.readyState == 'complete') {\n    fn.call(win, 'lazy');\n  } else {\n    if (doc.createEventObject && root.doScroll) {\n      try {\n        top = !win.frameElement;\n      } catch (e) {}\n\n      if (top) poll();\n    }\n\n    doc[add](pre + 'DOMContentLoaded', init, false);\n    doc[add](pre + 'readystatechange', init, false);\n    win[add](pre + 'load', init, false);\n  }\n}\n/**\n * Remove classes from a DOM element\n * @param {Element} element - The DOM element.\n * @param {string} cssClasses - Space separated list of class names.\n */\n\n\nfunction jqLiteRemoveClass(element, cssClasses) {\n  if (!cssClasses || !element.setAttribute) return;\n\n  var existingClasses = _getExistingClasses(element),\n      splitClasses = cssClasses.split(' '),\n      cssClass;\n\n  for (var i = 0; i < splitClasses.length; i++) {\n    cssClass = splitClasses[i].trim();\n\n    while (existingClasses.indexOf(' ' + cssClass + ' ') >= 0) {\n      existingClasses = existingClasses.replace(' ' + cssClass + ' ', ' ');\n    }\n  }\n\n  element.setAttribute('class', existingClasses.trim());\n} // ------------------------------\n// Utilities\n// ------------------------------\n\n\nvar SPECIAL_CHARS_REGEXP = /([\\:\\-\\_]+(.))/g,\n    MOZ_HACK_REGEXP = /^moz([A-Z])/,\n    ESCAPE_REGEXP = /([.*+?^=!:${}()|\\[\\]\\/\\\\])/g;\n\nfunction _getExistingClasses(element) {\n  var classes = (element.getAttribute('class') || '').replace(/[\\n\\t]/g, '');\n  return ' ' + classes + ' ';\n}\n\nfunction _camelCase(name) {\n  return name.replace(SPECIAL_CHARS_REGEXP, function (_, separator, letter, offset) {\n    return offset ? letter.toUpperCase() : letter;\n  }).replace(MOZ_HACK_REGEXP, 'Moz$1');\n}\n\nfunction _escapeRegExp(string) {\n  return string.replace(ESCAPE_REGEXP, \"\\\\$1\");\n}\n\nfunction _getCurrCssProp(elem, name, computed) {\n  var ret; // try computed style\n\n  ret = computed.getPropertyValue(name); // try style attribute (if element is not attached to document)\n\n  if (ret === '' && !elem.ownerDocument) ret = elem.style[_camelCase(name)];\n  return ret;\n}\n/**\n * Module API\n */\n\n\nmodule.exports = {\n  /** Add classes */\n  addClass: jqLiteAddClass,\n\n  /** Get or set CSS properties */\n  css: jqLiteCss,\n\n  /** Check for class */\n  hasClass: jqLiteHasClass,\n\n  /** Remove event handlers */\n  off: jqLiteOff,\n\n  /** Return offset values */\n  offset: jqLiteOffset,\n\n  /** Add event handlers */\n  on: jqLiteOn,\n\n  /** Add an execute-once event handler */\n  one: jqLiteOne,\n\n  /** DOM ready event handler */\n  ready: jqLiteReady,\n\n  /** Remove classes */\n  removeClass: jqLiteRemoveClass,\n\n  /** Check JavaScript variable instance type */\n  type: jqLiteType,\n\n  /** Get or set horizontal scroll position */\n  scrollLeft: jqLiteScrollLeft,\n\n  /** Get or set vertical scroll position */\n  scrollTop: jqLiteScrollTop\n};","map":null,"metadata":{},"sourceType":"script"}