{"ast":null,"code":"var babelHelpers = require('./babel-helpers.js');\n/**\n * MUI React button module\n * @module react/button\n */\n\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = babelHelpers.interopRequireDefault(require(\"react\"));\n\nvar jqLite = babelHelpers.interopRequireWildcard(require(\"../js/lib/jqLite\"));\nvar util = babelHelpers.interopRequireWildcard(require(\"../js/lib/util\"));\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = babelHelpers.getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = babelHelpers.getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return babelHelpers.possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar btnClass = 'mui-btn',\n    btnAttrs = {\n  color: 1,\n  variant: 1,\n  size: 1\n};\n/**\n * Button element\n * @class\n */\n\nvar Button =\n/*#__PURE__*/\nfunction (_React$Component) {\n  babelHelpers.inherits(Button, _React$Component);\n\n  var _super = _createSuper(Button);\n\n  function Button(props) {\n    var _this;\n\n    babelHelpers.classCallCheck(this, Button);\n    _this = _super.call(this, props);\n    babelHelpers.defineProperty(babelHelpers.assertThisInitialized(_this), \"state\", {\n      rippleStyle: {},\n      rippleIsVisible: false\n    });\n    var cb = util.callback;\n    _this.onMouseDownCB = cb(babelHelpers.assertThisInitialized(_this), 'onMouseDown');\n    _this.onMouseUpCB = cb(babelHelpers.assertThisInitialized(_this), 'onMouseUp');\n    _this.onMouseLeaveCB = cb(babelHelpers.assertThisInitialized(_this), 'onMouseLeave');\n    _this.onTouchStartCB = cb(babelHelpers.assertThisInitialized(_this), 'onTouchStart');\n    _this.onTouchEndCB = cb(babelHelpers.assertThisInitialized(_this), 'onTouchEnd');\n    return _this;\n  }\n\n  babelHelpers.createClass(Button, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // disable MUI js\n      var el = this.buttonElRef;\n      el._muiDropdown = true;\n      el._muiRipple = true;\n    }\n  }, {\n    key: \"onMouseDown\",\n    value: function onMouseDown(ev) {\n      this.showRipple(ev); // execute callback\n\n      var fn = this.props.onMouseDown;\n      fn && fn(ev);\n    }\n  }, {\n    key: \"onMouseUp\",\n    value: function onMouseUp(ev) {\n      this.hideRipple(ev); // execute callback\n\n      var fn = this.props.onMouseUp;\n      fn && fn(ev);\n    }\n  }, {\n    key: \"onMouseLeave\",\n    value: function onMouseLeave(ev) {\n      this.hideRipple(ev); // execute callback\n\n      var fn = this.props.onMouseLeave;\n      fn && fn(ev);\n    }\n  }, {\n    key: \"onTouchStart\",\n    value: function onTouchStart(ev) {\n      this.showRipple(ev); // execute callback\n\n      var fn = this.props.onTouchStart;\n      fn && fn(ev);\n    }\n  }, {\n    key: \"onTouchEnd\",\n    value: function onTouchEnd(ev) {\n      this.hideRipple(ev); // execute callback\n\n      var fn = this.props.onTouchEnd;\n      fn && fn(ev);\n    }\n  }, {\n    key: \"showRipple\",\n    value: function showRipple(ev) {\n      var buttonEl = this.buttonElRef; // de-dupe touch events\n\n      if ('ontouchstart' in buttonEl && ev.type === 'mousedown') return; // get (x, y) position of click\n\n      var offset = jqLite.offset(this.buttonElRef),\n          clickEv;\n      if (ev.type === 'touchstart' && ev.touches) clickEv = ev.touches[0];else clickEv = ev; // calculate radius\n\n      var radius = Math.sqrt(offset.width * offset.width + offset.height * offset.height);\n      var diameterPx = radius * 2 + 'px'; // add ripple to state\n\n      this.setState({\n        rippleStyle: {\n          top: Math.round(clickEv.pageY - offset.top - radius) + 'px',\n          left: Math.round(clickEv.pageX - offset.left - radius) + 'px',\n          width: diameterPx,\n          height: diameterPx\n        },\n        rippleIsVisible: true\n      });\n    }\n  }, {\n    key: \"hideRipple\",\n    value: function hideRipple(ev) {\n      this.setState({\n        rippleIsVisible: false\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var state = this.state,\n          rippleEl = this.rippleElRef; // show ripple\n\n      if (state.rippleIsVisible && !prevState.rippleIsVisible) {\n        jqLite.removeClass(rippleEl, 'mui--is-animating');\n        jqLite.addClass(rippleEl, 'mui--is-visible');\n        util.requestAnimationFrame(function () {\n          jqLite.addClass(rippleEl, 'mui--is-animating');\n        });\n      } // hide ripple\n\n\n      if (!state.rippleIsVisible && prevState.rippleIsVisible) {\n        // allow a repaint to occur before removing class so animation shows for\n        // tap events\n        util.requestAnimationFrame(function () {\n          jqLite.removeClass(rippleEl, 'mui--is-visible');\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var cls = btnClass,\n          k,\n          v;\n      var _this$props = this.props,\n          color = _this$props.color,\n          size = _this$props.size,\n          variant = _this$props.variant,\n          reactProps = babelHelpers.objectWithoutProperties(_this$props, [\"color\", \"size\", \"variant\"]); // button attributes\n\n      for (k in btnAttrs) {\n        v = this.props[k];\n        if (v !== 'default') cls += ' ' + btnClass + '--' + v;\n      }\n\n      return (\n        /*#__PURE__*/\n        _react.default.createElement(\"button\", babelHelpers.extends({}, reactProps, {\n          ref: function ref(el) {\n            _this2.buttonElRef = el;\n          },\n          className: cls + ' ' + this.props.className,\n          onMouseUp: this.onMouseUpCB,\n          onMouseDown: this.onMouseDownCB,\n          onMouseLeave: this.onMouseLeaveCB,\n          onTouchStart: this.onTouchStartCB,\n          onTouchEnd: this.onTouchEndCB\n        }), this.props.children,\n        /*#__PURE__*/\n        _react.default.createElement(\"span\", {\n          className: \"mui-btn__ripple-container\"\n        },\n        /*#__PURE__*/\n        _react.default.createElement(\"span\", {\n          ref: function ref(el) {\n            _this2.rippleElRef = el;\n          },\n          className: \"mui-ripple\",\n          style: this.state.rippleStyle\n        })))\n      );\n    }\n  }]);\n  return Button;\n}(_react.default.Component);\n/** Define module API */\n\n\nbabelHelpers.defineProperty(Button, \"defaultProps\", {\n  className: '',\n  color: 'default',\n  size: 'default',\n  variant: 'default'\n});\nvar _default = Button;\nexports.default = _default;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}